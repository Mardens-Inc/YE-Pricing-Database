<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="CargoProjects">
    <cargoProject FILE="$PROJECT_DIR$/Cargo.toml" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="da937078-773c-4d29-90a6-e2b28736ed47" name="Changes" comment="Add dynamic server configuration fetch&#10;&#10;Fetch server configuration dynamically from a remote URL and pass it to the Actix web application. This includes printing the server start message and integrating `database_config` for configuration management.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/database_row_entry.rs" beforeDir="false" afterPath="$PROJECT_DIR$/src/database_row_entry.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/db_access.rs" beforeDir="false" afterPath="$PROJECT_DIR$/src/db_access.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/httaccess.rs" beforeDir="false" afterPath="$PROJECT_DIR$/src/httaccess.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main.rs" beforeDir="false" afterPath="$PROJECT_DIR$/src/main.rs" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ChangesViewManager">
    <option name="groupingKeys">
      <option value="directory" />
    </option>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Rust File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;Drew-Chase&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/Mardens-Inc/YE-Pricing-Database&quot;,
    &quot;accountId&quot;: &quot;767b17f2-61cc-49f9-9314-dd4fa13fb83e&quot;
  }
}</component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="4sfaopal" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="2k3uzIXuqLClSNWZBYSGsFWj7tc" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "ASKED_ADD_EXTERNAL_FILES": "true",
    "Cargo.Run.executor": "Debug",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.rust.reset.selective.auto.import": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "database.data.extractors.current.export.id": "Comma-separated (CSV)_id",
    "git-widget-placeholder": "master",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "org.rust.cargo.project.model.PROJECT_DISCOVERY": "true",
    "org.rust.cargo.project.model.impl.CargoExternalSystemProjectAware.subscribe.first.balloon": "",
    "org.rust.first.attach.projects": "true",
    "settings.editor.selected.configurable": "language.rust.cargo.check"
  },
  "keyToStringList": {
    "DatabaseDriversLRU": [
      "mysql"
    ],
    "com.intellij.ide.scratch.LRUPopupBuilder$1/": [
      "MySQL"
    ],
    "com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File": [
      "JSON"
    ]
  }
}]]></component>
  <component name="RsExternalLinterProjectSettings">
    <option name="runOnTheFly" value="true" />
  </component>
  <component name="RunManager" selected="Cargo.Run">
    <configuration name="Run" type="CargoCommandRunConfiguration" factoryName="Cargo Command" nameIsGenerated="true">
      <option name="command" value="run" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Watch" type="CargoCommandRunConfiguration" factoryName="Cargo Command">
      <option name="command" value="watch -x run" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Cargo.Run" />
      <item itemvalue="Cargo.Watch" />
    </list>
  </component>
  <component name="RustProjectSettings">
    <option name="toolchainHomeDirectory" value="$USER_HOME$/.cargo/bin" />
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="da937078-773c-4d29-90a6-e2b28736ed47" name="Changes" comment="" />
      <created>1722524842061</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1722524842061</updated>
      <workItem from="1722524843947" duration="36000" />
      <workItem from="1722524900819" duration="9821000" />
      <workItem from="1722539948002" duration="19878000" />
      <workItem from="1722622028831" duration="1230000" />
      <workItem from="1722867255993" duration="18357000" />
    </task>
    <task id="LOCAL-00001" summary="Switch from .NET Core to Rust with Actix-web&#10;&#10;Replaced the existing .NET Core project with a Rust-based Actix-web project. Deleted .NET configuration and controller files, and added initial Actix-web server setup. Updated the `.gitignore` and included the new `Cargo.lock` file.">
      <option name="closed" value="true" />
      <created>1722601422178</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1722601422178</updated>
    </task>
    <task id="LOCAL-00002" summary="Add IntelliJ IDEA project configuration files&#10;&#10;This commit includes new `.idea` directory files to accommodate the IntelliJ IDEA project setup. These files define project structure, VCS mappings, auto-import settings, and specific toolchain configurations for the Rust-based project.">
      <option name="closed" value="true" />
      <created>1722601467670</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1722601467670</updated>
    </task>
    <task id="LOCAL-00003" summary="Add 'years-end-inventory' table&#10;&#10;Created 'years-end-inventory' table to store inventory details including tag number, store, department, percentage, prices, quantity, description, and employee details. The table includes auto-increment for the primary key and timestamp fields for creation and updates.">
      <option name="closed" value="true" />
      <created>1722948467309</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1722948467309</updated>
    </task>
    <task id="LOCAL-00004" summary="Update dependencies: add chrono and urlencoding&#10;&#10;Added `chrono` for enhanced date and time handling in serde and mysql features. Included the `urlencoding` crate to support URL encoding tasks. These additions improve functionality and maintain compatibility.">
      <option name="closed" value="true" />
      <created>1722948478401</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1722948478401</updated>
    </task>
    <task id="LOCAL-00005" summary="Add IntelliJ data source and code style configurations&#10;&#10;This commit introduces new configuration files for IntelliJ IDEA, including data sources for local MySQL databases and project-specific code style settings. These configurations will help streamline database connectivity and maintain consistent coding standards across the project.">
      <option name="closed" value="true" />
      <created>1722948487748</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1722948487748</updated>
    </task>
    <task id="LOCAL-00006" summary="Add database configuration struct&#10;&#10;Introduce `DatabaseConfig` and `Filemaker` structs with fields for host, user, passwords, and hash. Implemented serialization and deserialization using Serde to facilitate easy reading and writing of configuration data.">
      <option name="closed" value="true" />
      <created>1722948496093</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1722948496093</updated>
    </task>
    <task id="LOCAL-00007" summary="Add structs for database row and insertion handling&#10;&#10;Introduced `DatabaseRowEntry`, `DatabaseInsertEntry`, and `DBResult` structs for managing database rows, insertion data, and paginated results, respectively. This addition will streamline data handling and serialization, facilitating smoother database operations.">
      <option name="closed" value="true" />
      <created>1722948504202</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1722948504202</updated>
    </task>
    <task id="LOCAL-00008" summary="Add database access module&#10;&#10;Introduce `db_access.rs` to handle range queries and database connections for the years-end-inventory table. This includes query filtering, sorting, pagination, and connecting to the MySQL database based on the provided configuration.">
      <option name="closed" value="true" />
      <created>1722948512043</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1722948512043</updated>
    </task>
    <task id="LOCAL-00009" summary="Add HTTP GET and POST handlers for range and test endpoints&#10;&#10;Implemented the `range` and `test` functions to handle GET and POST requests respectively. These handlers manage query parameters, URI decoding, and error handling, interfacing with the database to either fetch or insert data based on the request.">
      <option name="closed" value="true" />
      <created>1722948520612</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1722948520612</updated>
    </task>
    <task id="LOCAL-00010" summary="Add dynamic server configuration fetch&#10;&#10;Fetch server configuration dynamically from a remote URL and pass it to the Actix web application. This includes printing the server start message and integrating `database_config` for configuration management.">
      <option name="closed" value="true" />
      <created>1722948531951</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1722948531951</updated>
    </task>
    <option name="localTasksCounter" value="11" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT" value="false" />
    <option name="CHECK_NEW_TODO" value="false" />
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
    <MESSAGE value="Switch from .NET Core to Rust with Actix-web&#10;&#10;Replaced the existing .NET Core project with a Rust-based Actix-web project. Deleted .NET configuration and controller files, and added initial Actix-web server setup. Updated the `.gitignore` and included the new `Cargo.lock` file." />
    <MESSAGE value="Add IntelliJ IDEA project configuration files&#10;&#10;This commit includes new `.idea` directory files to accommodate the IntelliJ IDEA project setup. These files define project structure, VCS mappings, auto-import settings, and specific toolchain configurations for the Rust-based project." />
    <MESSAGE value="Add 'years-end-inventory' table&#10;&#10;Created 'years-end-inventory' table to store inventory details including tag number, store, department, percentage, prices, quantity, description, and employee details. The table includes auto-increment for the primary key and timestamp fields for creation and updates." />
    <MESSAGE value="Update dependencies: add chrono and urlencoding&#10;&#10;Added `chrono` for enhanced date and time handling in serde and mysql features. Included the `urlencoding` crate to support URL encoding tasks. These additions improve functionality and maintain compatibility." />
    <MESSAGE value="Add IntelliJ data source and code style configurations&#10;&#10;This commit introduces new configuration files for IntelliJ IDEA, including data sources for local MySQL databases and project-specific code style settings. These configurations will help streamline database connectivity and maintain consistent coding standards across the project." />
    <MESSAGE value="Add database configuration struct&#10;&#10;Introduce `DatabaseConfig` and `Filemaker` structs with fields for host, user, passwords, and hash. Implemented serialization and deserialization using Serde to facilitate easy reading and writing of configuration data." />
    <MESSAGE value="Add structs for database row and insertion handling&#10;&#10;Introduced `DatabaseRowEntry`, `DatabaseInsertEntry`, and `DBResult` structs for managing database rows, insertion data, and paginated results, respectively. This addition will streamline data handling and serialization, facilitating smoother database operations." />
    <MESSAGE value="Add database access module&#10;&#10;Introduce `db_access.rs` to handle range queries and database connections for the years-end-inventory table. This includes query filtering, sorting, pagination, and connecting to the MySQL database based on the provided configuration." />
    <MESSAGE value="Add HTTP GET and POST handlers for range and test endpoints&#10;&#10;Implemented the `range` and `test` functions to handle GET and POST requests respectively. These handlers manage query parameters, URI decoding, and error handling, interfacing with the database to either fetch or insert data based on the request." />
    <MESSAGE value="Add dynamic server configuration fetch&#10;&#10;Fetch server configuration dynamically from a remote URL and pass it to the Actix web application. This includes printing the server start message and integrating `database_config` for configuration management." />
    <option name="LAST_COMMIT_MESSAGE" value="Add dynamic server configuration fetch&#10;&#10;Fetch server configuration dynamically from a remote URL and pass it to the Actix web application. This includes printing the server start message and integrating `database_config` for configuration management." />
  </component>
</project>