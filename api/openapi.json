{
	"openapi": "3.0.3",
	"info": {
		"title": "Inventory Management API",
		"version": "1.0.0",
		"description": "This API provides operations for managing inventory records in a database, including querying, adding, updating, deleting data, and toggling readonly mode."
	},
	"servers": [
		{
			"url": "http://127.0.0.1:1870",
			"description": "Local development server"
		}
	],
	"paths": {
		"/": {
			"get": {
				"summary": "Retrieve inventory records",
				"description": "Query inventory records with filters, pagination, and sorting options.",
				"parameters": [
					{ "name": "query", "in": "query", "schema": { "type": "string" }, "description": "Search query" },
					{ "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 }, "description": "Limit the number of results" },
					{ "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 }, "description": "Page number for pagination" },
					{ "name": "sort", "in": "query", "schema": { "type": "string", "default": "id" }, "description": "Sort field" },
					{ "name": "asc", "in": "query", "schema": { "type": "boolean", "default": false }, "description": "Sorting order (true for ascending, false for descending)" },
					{ "name": "employee", "in": "query", "schema": { "type": "integer", "default": -1 }, "description": "Filter by employee ID" },
					{ "name": "store", "in": "query", "schema": { "type": "integer", "default": -1 }, "description": "Filter by store ID" },
					{ "name": "department", "in": "query", "schema": { "type": "integer", "default": -1 }, "description": "Filter by department ID" },
					{ "name": "tag_number", "in": "query", "schema": { "type": "integer", "default": -1 }, "description": "Filter by tag number" },
					{ "name": "from", "in": "query", "schema": { "type": "string", "format": "date" }, "description": "Start date for filtering" },
					{ "name": "to", "in": "query", "schema": { "type": "string", "format": "date" }, "description": "End date for filtering" }
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"example": [
									{ "id": 1, "name": "Item 1", "quantity": 10 },
									{ "id": 2, "name": "Item 2", "quantity": 5 }
								]
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"example": { "error": "Some error message" }
							}
						}
					}
				}
			},
			"post": {
				"summary": "Insert inventory record",
				"description": "Insert a new inventory record into the database.",
				"requestBody": {
					"description": "JSON object representing the inventory record to add",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/DatabaseInsertEntry" }
						}
					}
				},
				"responses": {
					"200": { "description": "Record successfully added" },
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"example": { "error": "Some error message" }
							}
						}
					}
				}
			},
			"patch": {
				"summary": "Update inventory record",
				"description": "Update an existing inventory record.",
				"parameters": [
					{ "name": "id", "in": "query", "required": true, "schema": { "type": "integer" }, "description": "ID of the record to update" }
				],
				"requestBody": {
					"description": "JSON payload with updated fields",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/DatabaseInsertEntry" }
						}
					}
				},
				"responses": {
					"200": { "description": "Record successfully updated" },
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"example": { "error": "Some error message" }
							}
						}
					}
				}
			},
			"delete": {
				"summary": "Delete inventory record",
				"description": "Delete an inventory record by ID.",
				"parameters": [
					{ "name": "id", "in": "query", "required": true, "schema": { "type": "integer" }, "description": "ID of the record to delete" }
				],
				"responses": {
					"200": { "description": "Record successfully deleted" },
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"example": { "error": "Some error message" }
							}
						}
					}
				}
			}
		},
		"/truncate": {
			"delete": {
				"summary": "Truncate database",
				"description": "Delete all records from the database.",
				"responses": {
					"200": { "description": "All records successfully deleted" },
					"500": {
						"description": "Internal server error",
						"content": { "application/json": { "example": { "error": "Some error message" } } }
					}
				}
			}
		},
		"/export": {
			"get": {
				"summary": "Export database to CSV",
				"description": "Export all inventory records as a CSV file.",
				"responses": {
					"200": {
						"description": "CSV file exported",
						"content": {
							"text/csv": {
								"example": "id,name,quantity\n1,Item 1,10\n2,Item 2,5"
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": { "application/json": { "example": { "error": "Some error message" } } }
					}
				}
			}
		},
		"/readonly": {
			"get": {
				"summary": "Check readonly mode",
				"description": "Retrieve readonly mode status.",
				"responses": {
					"200": {
						"description": "Readonly mode status",
						"content": {
							"application/json": {
								"example": { "is_readonly": false }
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": { "application/json": { "example": { "error": "Could not get is_readonly" } } }
					}
				}
			},
			"post": {
				"summary": "Toggle readonly mode",
				"description": "Enable or disable readonly mode.",
				"responses": {
					"200": {
						"description": "Readonly mode status toggled",
						"content": {
							"application/json": {
								"example": { "is_readonly": true }
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": { "application/json": { "example": { "error": "Could not toggle is_readonly" } } }
					}
				}
			}
		},
		"/ping": {
			"get": {
				"summary": "Health check endpoint",
				"description": "Check if the server is operational.",
				"responses": {
					"200": { "description": "Server is operational" }
				}
			}
		}
	},
	"components": {
		"schemas": {
			"DatabaseInsertEntry": {
				"type": "object",
				"properties": {
					"id": { "type": "integer", "example": 1 },
					"name": { "type": "string", "example": "Item 1" },
					"quantity": { "type": "integer", "example": 10 }
				},
				"required": ["id", "name", "quantity"],
				"description": "Schema for an inventory record"
			}
		}
	}
}